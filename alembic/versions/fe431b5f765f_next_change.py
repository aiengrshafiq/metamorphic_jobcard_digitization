"""next change

Revision ID: fe431b5f765f
Revises: a609e60bb0a7
Create Date: 2025-10-08 13:13:53.769165

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fe431b5f765f'
down_revision: Union[str, Sequence[str], None] = 'a609e60bb0a7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('design_projects_v3',
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('name', sa.String(), nullable=False),
    # sa.Column('client', sa.String(), nullable=True),
    # sa.Column('status', sa.String(), nullable=True),
    # sa.Column('created_at', sa.DateTime(), nullable=True),
    # sa.Column('created_by_id', sa.Integer(), nullable=True),
    # sa.Column('deal_id', sa.Integer(), nullable=True),
    # sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    # sa.ForeignKeyConstraint(['deal_id'], ['deals.id'], ),
    # sa.PrimaryKeyConstraint('id'),
    # sa.UniqueConstraint('deal_id')
    # )
    # op.create_table('design_stages_v3',
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('name', sa.Enum('FINANCE_CONFIRMATION', 'DEAL_CREATION', 'SITE_VISIT', 'MEASUREMENT', 'INITIAL_DESIGN', 'QS_HANDOVER', 'MANAGEMENT_OVERSIGHT', name='stagename'), nullable=False),
    # sa.Column('status', sa.Enum('LOCKED', 'IN_PROGRESS', 'COMPLETED', name='stagev3status'), nullable=False),
    # sa.Column('order', sa.Integer(), nullable=False),
    # sa.Column('project_id', sa.Integer(), nullable=False),
    # sa.ForeignKeyConstraint(['project_id'], ['design_projects_v3.id'], ),
    # sa.PrimaryKeyConstraint('id')
    # )
    # op.drop_table('interdisciplinary_signoffs')
    # op.drop_index(op.f('ix_design_scores_id'), table_name='design_scores')
    # op.drop_table('design_scores')
    # op.drop_table('site_visit_logs')
    # op.drop_table('design_stages')
    # op.drop_index(op.f('ix_design_projects_id'), table_name='design_projects')
    # op.drop_table('design_projects')
    # op.drop_table('design_tasks_v2')
    # op.drop_table('design_projects_v2')
    # op.drop_index(op.f('ix_design_tasks_id'), table_name='design_tasks')
    # op.drop_table('design_tasks')
    # op.drop_index(op.f('ix_design_phases_id'), table_name='design_phases')
    # op.drop_table('design_phases')
    # op.drop_index(op.f('ix_design_task_comments_id'), table_name='design_task_comments')
    # op.drop_table('design_task_comments')
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('design_task_comments',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('comment_text', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('comment_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['comment_by_id'], ['users.id'], name=op.f('design_task_comments_comment_by_id_fkey')),
    # sa.ForeignKeyConstraint(['task_id'], ['design_tasks.id'], name=op.f('design_task_comments_task_id_fkey')),
    # sa.PrimaryKeyConstraint('id', name=op.f('design_task_comments_pkey'))
    # )
    # op.create_index(op.f('ix_design_task_comments_id'), 'design_task_comments', ['id'], unique=False)
    # op.create_table('design_phases',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('design_phases_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('name', postgresql.ENUM('PHASE_2', 'PHASE_4', 'PHASE_5', name='designphasename'), autoincrement=False, nullable=False),
    # sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    # sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['project_id'], ['design_projects.id'], name='design_phases_project_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='design_phases_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_index(op.f('ix_design_phases_id'), 'design_phases', ['id'], unique=False)
    # op.create_table('design_tasks',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('design_tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('status', postgresql.ENUM('OPEN', 'SUBMITTED', 'REVISION_REQUESTED', 'VERIFIED', 'DONE', name='designtaskstatus'), autoincrement=False, nullable=False),
    # sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    # sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('file_link', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('phase_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('verified_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('signed_off_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('sign_off_notes', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('signed_off_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='design_tasks_owner_id_fkey'),
    # sa.ForeignKeyConstraint(['phase_id'], ['design_phases.id'], name='design_tasks_phase_id_fkey'),
    # sa.ForeignKeyConstraint(['signed_off_by_id'], ['users.id'], name='design_tasks_signed_off_by_id_fkey'),
    # sa.ForeignKeyConstraint(['verified_by_id'], ['users.id'], name='design_tasks_verified_by_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='design_tasks_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_index(op.f('ix_design_tasks_id'), 'design_tasks', ['id'], unique=False)
    # op.create_table('design_projects_v2',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('design_projects_v2_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('client', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('finance_confirmed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('deal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='design_projects_v2_created_by_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='design_projects_v2_pkey'),
    # sa.UniqueConstraint('deal_id', name='design_projects_v2_deal_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('design_tasks_v2',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('status', postgresql.ENUM('OPEN', 'SUBMITTED', 'REVISION', 'APPROVED', 'VERIFIED', name='taskstatusv2'), autoincrement=False, nullable=False),
    # sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    # sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('file_link', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('design_tasks_v2_owner_id_fkey')),
    # sa.ForeignKeyConstraint(['stage_id'], ['design_stages.id'], name=op.f('design_tasks_v2_stage_id_fkey')),
    # sa.PrimaryKeyConstraint('id', name=op.f('design_tasks_v2_pkey'))
    # )
    # op.create_table('design_projects',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('design_projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('client', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='design_projects_created_by_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='design_projects_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_index(op.f('ix_design_projects_id'), 'design_projects', ['id'], unique=False)
    # op.create_table('design_stages',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('design_stages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['project_id'], ['design_projects_v2.id'], name='design_stages_project_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='design_stages_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('site_visit_logs',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('meeting_held_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('mom_link', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('site_photos_link', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('updated_brief_link', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['stage_id'], ['design_stages.id'], name=op.f('site_visit_logs_stage_id_fkey')),
    # sa.PrimaryKeyConstraint('id', name=op.f('site_visit_logs_pkey')),
    # sa.UniqueConstraint('stage_id', name=op.f('site_visit_logs_stage_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    # )
    # op.create_table('design_scores',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('lateness_days', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['task_id'], ['design_tasks.id'], name=op.f('design_scores_task_id_fkey')),
    # sa.PrimaryKeyConstraint('id', name=op.f('design_scores_pkey')),
    # sa.UniqueConstraint('task_id', name=op.f('design_scores_task_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    # )
    # op.create_index(op.f('ix_design_scores_id'), 'design_scores', ['id'], unique=False)
    # op.create_table('interdisciplinary_signoffs',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('discipline', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('is_approved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('signed_off_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('signed_off_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['signed_off_by_id'], ['users.id'], name=op.f('interdisciplinary_signoffs_signed_off_by_id_fkey')),
    # sa.ForeignKeyConstraint(['stage_id'], ['design_stages.id'], name=op.f('interdisciplinary_signoffs_stage_id_fkey')),
    # sa.PrimaryKeyConstraint('id', name=op.f('interdisciplinary_signoffs_pkey'))
    # )
    # op.drop_table('design_stages_v3')
    # op.drop_table('design_projects_v3')
    pass
    # ### end Alembic commands ###
